#####################################################################
#  Homing definition
#####################################################################

[output_pin LJ12]
pin: auxboard:P2.4
pwm: False
value: 0
shutdown_value: 0

[bed_mesh]
mesh_min: 20, 20
mesh_max: 337, 280
horizontal_move_z: 4
probe_count: 12,12
algorithm: bicubic
move_check_distance: 3
split_delta_z: .01
mesh_pps: 2,2
speed: 100
horizontal_move_z: 3
fade_start: 0.6
fade_end: 10.0
relative_reference_index: 71

[z_tilt]
z_positions:
        -28,-32
        461,-32
points:
        48,-32
        361,-32
speed: 100
horizontal_move_z: 8
retries: 8
retry_tolerance: 0.008


[screws_tilt_adjust]
horizontal_move_z: 4
screw1: 214,135.5
screw1_name: Center
screw2: 74,252
screw2_name: Back left
screw3: 340,252
screw3_name: Back right
screw4: 74, 30
screw4_name: Front left
screw5: 340,30
screw5_name: Front right
speed: 100
screw_thread: CW-M5

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X180 Y0 Z175 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X10 Y315 Z250 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X180 Y157 Z175 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X180 Y158 Z30 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED

# [safe_z_home]
# home_xy_position: 214,135.5
# speed: 100
# z_hop: 10
# z_hop_speed: 5



[homing_override]
axes: z
set_position_z: 0
gcode:
  SAVE_GCODE_STATE NAME=STATE_HOMING
  G91          ; set relative
  G0 Z7.5 F900 ; lift nozzle
  G90          ; set absolute
  ## reduce current of Z motors
  _SET_ACC VAL=HOME
  _SET_Z_CURRENT VAL=HOME
  # Home X and Y only for G28 or G28 XYZ
  {% if 'Z' in params %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
  {% else %}
    G28 X Y
  {% endif %}      
  ##	XY Location of the Z Endstop Switch
  ##	Update X0 and Y0 to your values (such as X157, Y305) after going through
  ##	Z Endstop Pin Location Definition step.
  # Move to Endstop position
  G0 X214 Y135.5 F7200 
  # Home Z
  G28 Z
  ## return to org current settings
  _SET_Z_CURRENT
  _SET_ACC
  # Lift Z
  G0 Z10 F1800
  RESTORE_GCODE_STATE NAME=STATE_HOMING

#####################################################################
#  Macros
#####################################################################
  
[gcode_macro _SET_ACC]
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int * 2 / 3 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer. max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}
  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}

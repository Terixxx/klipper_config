#####################################################################
#  Preperation 
#####################################################################
## copy this file in the same directory as your printer.cfg
## add 
##    [include Spoolsamount.cfg]
## to your printer.cfg
##
## A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
## You can skip this if you already have an [save_variables] config block
## e.g: 
##    [save_variables]
##    filename: /home/pi/klipper_config/.variables.stb
## I like to hide that file as there is nothing in that should be modified by the user.
## Do a klipper restart after adding the stuff above
##
## After klipper is back type 
##     _INIT_spool_array
## in the console to initial the needed variables
## Thats all you need to do for the initial setup
##
#####################################################################
#  Normal usage Console
#####################################################################
## Init Array                : _INIT_spool_array (one time action)
## List all plates           : _LIST_PLATES
## Change act Plate          : _SET_PLATE INDEX=0 (any index number)
## Add New Plate             : _ADD_NEW_PLATE
## Remove active Plate       : _REMOVE_PLATE
## Change offset of act Plate: _CHANGE_PLATE_OFFSET OFFSET=0.001 (any new offset) 
## Change name of act Plate  : _CHANGE_PLATE_NAME Name=test (any new name) 
##
#####################################################################
#  Normal usage LCD menu
#####################################################################
## you can do all what is listed above exluding list plates (not needed)
## change name is not implemented as I do not have a clue how to do the naming in the lcd
## The visibility of Menu Items depends on the printer state
##
#####################################################################
#  Get offset_z and name for own usage
#####################################################################
## use:  
##   {% set plate_offset_z = printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][1] %}
##   {% set plate_name = printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][0] %}
## to get the needed parameter of the active plate
##
#####################################################################
#  Macros
#####################################################################
## Initial active spool at klipper start
[delayed_gcode _DELAY_INIT_SPOOL]
initial_duration: 1
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    _DISPLAY_SPOOL TEXT='Init'
    # _SET_PLATE_OFFSET MOVE='false' ;Tuk trqbva da promenq logikata
  {% endif %}


#!!!Nqmam ideq dali 6te trqbva tozi kod!!!!
# execute gcode offset of the actual plate
# !!! old offsets will ger zero'ed !!!
# usage: _SET_PLATE_OFFSET MOVE='false'
# [gcode_macro _SET_ACTIVE_SPOOL]
# gcode:
#   # set default parameter value
#   {% set move = params.MOVE|default('true') %}
#   {% if not printer.save_variables.variables.spool_array %}
#     {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
#   {% else %}
#     {% set spools = printer.save_variables.variables.spool_array %}
#     {% set index = printer.save_variables.variables.spool_index|int %}
#     {% set active_spool = spools[index][1] %}
#     SET_GCODE_OFFSET Z=0
#     {% if move == 'true' %}
#       SET_GCODE_OFFSET Z_ADJUST={active_spool|float} MOVE=1
#     {% else %}
#       SET_GCODE_OFFSET Z_ADJUST={active_spool|float}
#     {% endif %}
#   {% endif %}

# shows active spool and amount and filament type in console and display
# usage: _DISPLAY_SPOOL TEXT='Set'
[gcode_macro _DISPLAY_SPOOL]
gcode:
  # set default parameter value
  {% set text = params.TEXT|default('Used') %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set index = printer.save_variables.variables.spool_index|int %}
    {% set spool_amount = spools[index][1] %}
    {% set spool_name = spools[index][0] %}
    {% set spool_num = spools[index][2] %}
    {% set spool_type = spools[index][3] %}
    {% set def_spool = spools[index][4] %}
    {% set life_spool = spools[index][5] %}
    M117 Spool: {spool_name}
    {% if ((spool_num|int) > 1 ) %}
      {action_respond_info("%s Spool: %s -> spool amount: %01.3fm in: %-2d spools -> filament type: %s" % (text, spool_name|string, (spool_amount|float+def_spool|float), spool_num|int, spool_type|string))}
    {% else %}
      {action_respond_info("%s Spool: %s -> spool amount: %01.3fm in: %-2d spool -> filament type: %s" % (text, spool_name|string, (spool_amount|float), spool_num|int, spool_type|string))}
    {% endif %}
    # SAVE_VARIABLE VARIABLE=fname VALUE="{spool_name|string}"
    # SAVE_VARIABLE VARIABLE=ftype VALUE="{spool_type|string}"
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  {% endif %}

# initial array this is only working as long the variables are not existing
# this is done to help users at the install
# usage: _INIT_SPOOL_ARRAY
[gcode_macro _INIT_SPOOL_ARRAY]
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {% set array = namespace(output = '') %}
    # klipper can not store arrays elements so we need to do a string manipulation
    # add first element
    {% set element = "[('First', 0.0, 1,'PLA', 340.000, 0.0)]" %}
    {% set array.output = array.output +  element %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
    SAVE_VARIABLE VARIABLE=spool_index VALUE=0
  {% else %}
    {action_respond_info("SPOOLSAMOUNT: Spool Array alread exists. ABORDED")}
  {% endif %}

# list all Spools
# usage: LIST_SPOOLS
[gcode_macro LIST_SPOOLS]
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    {% set element = "Defined Spools:" %}
    {% set array.output = array.output + element + "\n"%}
    {% for index in range(elem_count) %}
      {% set element = "%-10s -> Amount: %01.3fm -> in: %-2d spools -> Type: %-10s - > Full spool: %01.3fm -> Life spool: %01.3fm Index: %-2d" % (spools[index][0], (spools[index][1]|float + (spools[index][4]|float * (spools[index][2]|float-1.0))), spools[index][2]|int, spools[index][3], spools[index][4]|float, spools[index][5], index) %}
      {% set array.output = array.output + element + "\n"%}
    {% endfor %}
    {% set element = "Active Spool: %s" % (spools[act_index][0]) %}
    {% set array.output = array.output + "\n" + element + "\n"%}
    {action_respond_info("%s" % (array.output))}
  {% endif %}

# set active plate by index
# usage: _SET_SPOOL INDEX=0
[gcode_macro _SET_SPOOL]
gcode:
  # set default parameter value
  {% set index = params.INDEX|default(0)|int %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    # check INDEX in range
    {% if (index|int >= 0) and (index|int <= (elem_count-1)) %}
      SAVE_VARIABLE VARIABLE=spool_index VALUE={index|int}
      _DISPLAY_SPOOL TEXT='Set'
      # check if printer is homed
    #   {% if "xyz" in printer.toolhead.homed_axes %}
    #     _SET_PLATE_OFFSET
    #   {% else %}
    #     {action_respond_info("Offset will be appied with next move")}
    #     _SET_PLATE_OFFSET MOVE='false'
    #   {% endif %}
    {% else %}
      {action_respond_info("Spoolsamount: Index out of Range. ABORDED")}
    {% endif %}
  {% endif %}

# add a new plate to the array
# usage: _ADD_NEW_SPOOL
[gcode_macro _ADD_NEW_SPOOL]
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      {% set element = "('%s', %s, %s, '%s', %s, %s), " % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% set array.output = array.output + element %}
    {% endfor %}
    # add new element
    {% set element = "('New', 0.0, 1, 'PLA', 340.000, 0.0)" %}
    {% set array.output = array.output + element %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
  {% endif %}
  
# remove the active plate from array
# !!! Active Plate will change to first plate
# usage: _REMOVE_SPOOL
[gcode_macro _REMOVE_SPOOL]
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # check if last aray element needs to be deleted
    {% if act_index == (spools|length - 1) %}
      # last element will be deleted    
      {% set elem_count = spools|length - 1 %}
    {% else %}
      {% set elem_count = spools|length %}
    {% endif %}
    # check if array contains only one element
    {% if elem_count <= 1%}
      {action_respond_info("SPOOLSAMOUNT: Last Spool can not be deleted. ABORDED")}
    {% else %}
      # klipper can not store arrays elements so we need to do a string manipulation 
      {% for index in range(elem_count) %}
        {% if index != act_index %}
          {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
          {% set array.output = array.output + element %}
          # add seperator where needed
          {% if index != (elem_count-1) %}
            {% set element = ", " %}
            {% set array.output = array.output + element %}
          {% endif %}
        {% endif %}
      {% endfor %}
      # add array boarders
      {% set array.output = "[%s]"% (array.output) %}
      SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
      SAVE_VARIABLE VARIABLE=spool_index VALUE=0
      _DISPLAY_PLATE TEXT='Set'
      # check if printer is homed
    #   {% if "xyz" in printer.toolhead.homed_axes %}
    #     _SET_PLATE_OFFSET
    #   {% else %}
    #     {action_respond_info("Offset will be appied with next move")}
    #     _SET_PLATE_OFFSET MOVE='false'
    #   {% endif %}
    {% endif %}
  {% endif %}

# change amount of the actual selected spool
# usage: _CHANGE_SPOOL_AMOUNT AMOUNT=0.001 TEXT='Set'
[gcode_macro _CHANGE_SPOOL_AMOUNT]
gcode:
  # set default parameter value
  {% set text = params.TEXT|default('Update') %}
  {% set used_amount = params.AMOUNT|default(0.0)|float / 1000.0 %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% if text == 'Update' %}
          {% set used_amount = params.AMOUNT|default(0.0)|float / 1000.0 %}
          {% set amount = spools[index][1]|float %}
          {% set amount =  amount - used_amount %}
          {% set spool_num = spools[index][2]|int %}
          {% set full_amount = spools[index][4]|float %}
          {% set life_amount = spools[index][5]|float %}
          {% set life_amount = life_amount + used_amount %}
          {% if amount <= 0 %}
            {% set amount =  (amount + full_amount) %}
            {% set spool_num = (spool_num - 1) %}
            {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], amount, spool_num, spools[index][3], spools[index][4], life_amount) %}
          {% else %}
            {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], amount, spools[index][2], spools[index][3], spools[index][4], life_amount) %}
          {% endif %}
        {% else %}
          {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], amount, spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
        {% endif %}
      {% else %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
    _DISPLAY_SPOOL TEXT={text}
    # check if printer is homed
    # {% if "xyz" in printer.toolhead.homed_axes %}
    #   _SET_PLATE_OFFSET ;!!!!Tuk trqbva da pomislq
    # {% else %}
    #   {action_respond_info("Offset will be appied with next move")}
    #   _SET_PLATE_OFFSET MOVE='false'
    # {% endif %}
  {% endif %}

# change filament type of the actual selected spool
# usage: _CHANGE_SPOOL_TYPE TYPE='PLA'
[gcode_macro _CHANGE_SPOOL_TYPE]
gcode:
  # set default parameter value
  {% set ftype = params.TYPE|default('PLA') %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], ftype, spools[index][4], spools[index][5]) %}
      {% else %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
    _DISPLAY_SPOOL TEXT='Set'
    # check if printer is homed
    # {% if "xyz" in printer.toolhead.homed_axes %}
    #   _SET_PLATE_OFFSET ;!!!!Tuk trqbva da pomislq
    # {% else %}
    #   {action_respond_info("Offset will be appied with next move")}
    #   _SET_PLATE_OFFSET MOVE='false'
    # {% endif %}
  {% endif %}

# change number of filament spools of the actual selected spool
# usage: _CHANGE_SPOOL_NUM NUM=1
[gcode_macro _CHANGE_SPOOL_NUM]
gcode:
  # set default parameter value
  {% set spool_num = params.TYPE|default(1)|int %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation 
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spool_num, spools[index][3], spools[index][4], spools[index][5]) %}
      {% else %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
    _DISPLAY_SPOOL TEXT='Set'
    # check if printer is homed
    # {% if "xyz" in printer.toolhead.homed_axes %}
    #   _SET_PLATE_OFFSET ;!!!!Tuk trqbva da pomislq
    # {% else %}
    #   {action_respond_info("Offset will be appied with next move")}
    #   _SET_PLATE_OFFSET MOVE='false'
    # {% endif %}
  {% endif %}
  
# change name of the actual selected plate
# usage: _CHANGE_SPOOL_NAME Name=test
[gcode_macro _CHANGE_SPOOL_NAME]
gcode:
  # set default parameter value
  {% set name = params.NAME|default('New') %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (name, spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% else %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
  {% endif %}

# change full amount of the actual selected plate
# usage: _CHANGE_SPOOL_FAMOUNT FAMOUNT=340.000
[gcode_macro _CHANGE_SPOOL_FAMOUNT]
gcode:
  # set default parameter value
  {% set famount = params.FAMOUNT|default(340.0)|float %}
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    # klipper can not store arrays elements so we need to do a string manipulation
    {% for index in range(elem_count) %}
      # chech for element to change
      {% if index == act_index %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][1], spools[index][1], spools[index][2], spools[index][3], famount, spools[index][5]) %}
      {% else %}
        {% set element = "('%s', %s, %s, '%s', %s, %s)" % (spools[index][0], spools[index][1], spools[index][2], spools[index][3], spools[index][4], spools[index][5]) %}
      {% endif %}
      {% set array.output = array.output + element %}
      # add seperator where needed
      {% if index != (elem_count-1) %}
        {% set element = ", " %}
        {% set array.output = array.output + element %}
      {% endif %}
    {% endfor %}
    # add array boarders
    {% set array.output = "[%s]"% (array.output) %}
    SAVE_VARIABLE VARIABLE=spool_array VALUE="{array.output}"
  {% endif %}

# list all Spools and get correct Index
# usage: _GET_SPOOL_ID NAME='3DLine_PLA_Black'
[gcode_macro _GET_SPOOL_ID]
gcode:
  {% if not printer.save_variables.variables.spool_array %}
    {action_respond_info("SPOOLSAMOUNT: No Spool Array defined, please run _INIT_SPOOL_ARRAY")}
  {% else %}
    {% set fid = params.NAME|default('3DLine_PLA_Black')|string %}
    {% set spool_index = 0 %}
    {% set array = namespace(output = '') %}
    {% set spools = printer.save_variables.variables.spool_array %}
    {% set elem_count = spools|length %}
    {% set act_index = printer.save_variables.variables.spool_index|int %}
    {% set element = "Defined Spools:" %}
    {% set array.output = array.output + element + "\n"%}
    {% for index in range(elem_count) %}
      {% if fid == spools[index][0]|string %}
        {% set spool_index = index|int %}
        _SET_SPOOL INDEX={spool_index}
      {% endif %}
    {% endfor %}
    {% set element = "Active Spool: %s" % (spools[spool_index][0]) %}
  {% endif %}

  #####################################################################
#  Display Menu
#####################################################################
## SpoolsAmount selection
[menu __main __spoolamn]
type: list
name: Spoolsamount
enable: {not printer.idle_timeout.state == "Printing"}
index: 1

[menu __main __spoolamn __act]
type: command
name:  Act: {printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][0]} 
enable: {'spool_array' in printer.save_variables.variables}

[menu __main __spoolamn __set]
type: input
name:  Set: {printer.save_variables.variables.spool_array[menu.input|int][0]}
enable: {'spool_array' in printer.save_variables.variables}
input: {printer.save_variables.variables.spool_index|int}
input_min: 0
input_max: {printer.save_variables.variables.spool_array|length - 1}
gcode:
  {%- if menu.event == 'long_click' -%}
    _SET_SPOOL INDEX={'%d' % menu.input|int}
  {%- endif -%}

[menu __main __spoolamn __setup]
type: list
name: Spool Setup

[menu __main __spoolamn __setup __init]
type: command
name:  Init Spool Array 
enable: {'spool_array' not in printer.save_variables.variables}
gcode:
  _INIT_SPOOL_ARRAY

[menu __main __spoolamn __setup __add]
type: command
name:  Add new Plate 
enable: {'spool_array' in printer.save_variables.variables}
gcode:
  _ADD_NEW_SPOOL
  
[menu __main __spoolamn __setup __remove]
type: command
name:  Remove active Spool 
enable: {'spool_array' in printer.save_variables.variables}
gcode:
  _REMOVE_SPOOl

[menu __main __spoolamn __setup __amount]
type: input
name:  Amount:{'%01.3f' % menu.input}
enable: {'spool_array' in printer.save_variables.variables}
input: {printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][1]}
input_min: 0
input_max: 420
input_step: 0.001
gcode:
  {%- if menu.event == 'long_click' -%}
    _CHANGE_SPOOL_AMOUNT AMOUNT={'%01.3f' % menu.input|float}
  {%- endif -%}

[menu __main __spoolamn __setup __type]
type: input
name:  Type:{['PLA','ABS','PETG','PC','TPU','PVDF','ASA','SILK'][menu.input|int]}
enable: {'spool_array' in printer.save_variables.variables}
input: {printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][3]}
input_min: 0
input_max: 8
input_step: 1
gcode:
  {%- if menu.event == 'long_click' -%}
    _CHANGE_SPOOL_TYPE TYPE={menu.input|string}
  {%- endif -%}

## no idea how to implement that at the moment
#[menu __main __spoolamn __setup __name]
#type: input
#name:  Name:{'%s' % menu.input}
#enable: {'spool_array' in printer.save_variables.variables}
#input: {printer.save_variables.variables.spool_array[printer.save_variables.variables.spool_index|int][0]}
#gcode:
#  {%- if menu.event == 'long_click' -%}
#    _CHANGE_PLATE_NAME NAME={'%f' % menu.input|float}
#  {%- endif -%}
########################################
# Macro configuration
########################################
# Conditional G28
[gcode_macro CG28]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro servo_on]
gcode: 
	SET_PIN PIN=TL-Q5MC1 VALUE=1

[gcode_macro servo_off]
gcode:
	G4 S500
	SET_PIN PIN=TL-Q5MC1 VALUE=0

[gcode_macro M204]
rename_existing: M2041
gcode:
  {% if 'P' in params %}
    {% set accel = params.P %}
  {% elif 'S' in params %}
    {% set accel = params.S %}
  {% elif 'T' in params %}
    {% set accel = params.T %}
  {% endif %}
  {% set accel_to_decel = (accel|float * 2.0 / 3.0)|int %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
gcode:
  # set default parameter value
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
gcode:
  #set default parameter value
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}  

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh VORON-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro DUMP_SETTINGS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.settings %}
    {% set show = ['extruder'] %}
    {% if name1 is not in show %}
      {% set param = "printer.configfile.settings['%s'] = %s" % (name1, printer.configfile.settings[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_MCU_VER]
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
        

[gcode_macro DUMP_SATS]
gcode:
  {% set cpu_t = printer.system_stats.cputime %}
  {% set cpu_h = (cpu_t / 3600)|int %}
  {% set cpu_m = ((cpu_t / 60) % 60)|int %}
  {% set cpu_s = (cpu_t % 60)|int %}
  {% set sysload = printer.system_stats.sysload|float * 100.0 %}
  {% set mem_val = printer.system_stats.memavail|float / 8388608.0 %}
  {action_respond_info("klipper process statistic:
                        Head stalls: %d
                        CPU Time: %d:%02d:%02d
                        Sysload: %.2f percent
                        Mem Val: %.3f MB" % (printer.toolhead.stalls, cpu_h, cpu_m ,cpu_s, sysload, mem_val))}
	
# [gcode_macro DISPLAY]
# variable_state = 'on'
# gcode = 
# 	{% if printer["gcode_macro DISPLAY"].state == 'on' %}
# 	_DISPLAY_OFF
# 	{% else %}
# 	_DISPLAY_ON
# 	{% endif %}

# [gcode_macro _DISPLAY_STATE]
# gcode = 
# 	{action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

# [gcode_macro _DISPLAY_OFF]
# gcode = 
# 	SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
# 	_DISPLAY_STATE

# [gcode_macro _DISPLAY_ON]
# gcode = 
# 	SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
# 	_DISPLAY_STATE
    
# [gcode_macro M141]
# default_parameter_s: 60
# gcode:
#   SET_HEATER_TEMPERATURE HEATER=chamber TARGET={S}


[gcode_macro G29]
gcode:
    {% set bed_temp = params.TEMP|default('60') %}
    M117 ABL..........
    servo_on
	  BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={bed_temp}
	  BED_MESH_PROFILE REMOVE=default
    M300
    servo_off
    M117 Mesh calibrated.  Saving and restart!!
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    SAVE_CONFIG

[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    M117 Z Tilt.....
    servo_on
    BED_MESH_CLEAR
    _Z_TILT_ADJUST
    G28 Z
    M117 Z Tilt finished!
    servo_off
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
    M117 Screws Tilt.....
    _SCREWS_TILT_CALCULATE
    M300
    G28 z
    M117 Screws Tilt finished!
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro NOZZLE_CHANGE]
gcode:
        {% if printer.toolhead.homed_axes != 'xyz' %}
                G28
        {% endif %}
	G90
        G1 Z5 F6000
        G1 X175 Y50 Z5 F6000
	G1 Z150 F600

# Heatsoaking
[gcode_macro HEATSOAK]
gcode:
  {% if printer.idle_timeout.state != "Printing" %}
    SAVE_GCODE_STATE NAME=HEATSOAK
    M141 S55                       ; set chamber for 55C max
    M140 S{S}                      ; Set bed
    M104 S160                      ; Set hotend
    PARKBED                        ; Move to position
    RESTORE_GCODE_STATE NAME=HEATSOAK
  {% else %}
    { action_respond_info("HEATSOAK routine disabled while printing!") }
  {% endif %}
default_parameter_S: 105

[gcode_macro M900]
default_parameter_K=0
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={K}


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    PAUSE
  
# ignore m205 commands
[gcode_macro m205]
gcode:
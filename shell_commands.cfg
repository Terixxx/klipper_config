[gcode_macro RESONANCES_TEST]
gcode:
  ## check if config values set to minimum 10k 
  {% set accel = printer.configfile.settings.printer.max_accel|int %}
  {% set accel_to_decel = printer.configfile.settings.printer. max_accel_to_decel|int %}
  {action_respond_info("INPUT SHAPER Config Values:
                       max_accel: %d 
                       max_accel_to_decel: %d" %(accel,accel_to_decel))}
  {% if (accel < 10000) or (accel_to_decel < 10000) %}
    _PRINT_INFO1
  {% else %}
    CG28                  ; home if needed
    TURN_OFF_HEATERS       ; turn off heaters
    M107                   ; turn off fan
    M141 S0                ; exhaust fan off
    _SET_FILTER S=0.0      ; filter off
    _SET_ACC VAL='CONFIG'  ; set accel and max_accel_to_decel to config value
    _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
    MEASURE_AXES_NOISE     ; get noise value in log
    _PRINT_AR T="INPUT SHAPER: Resonance Tests starting ..."
    TEST_RESONANCES AXIS=X ; measure X 
    TEST_RESONANCES AXIS=Y ; measure Y
    _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
    _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
    RUN_SHELL_COMMAND CMD=plot_graph
  {% endif %}

[gcode_macro VNC]
default_parameter_MODE: start
gcode:
    {% if MODE == "start" %}
    RUN_SHELL_COMMAND CMD=vnc_start
    {% elif MODE == "stop" %}
    RUN_SHELL_COMMAND CMD=vnc_stop
    {% elif MODE == "restart" %}
    RUN_SHELL_COMMAND CMD=vnc_restart
    {% elif MODE == "staus" %}
    RUN_SHELL_COMMAND CMD=vnc_status
    {%endif%}

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
  
[gcode_macro _PRINT_INFO1]
gcode:
  {action_respond_info("INPUT SHAPER ERROR: 
                        Set in printer.cfg and SAVE_CONFIG 
                        max_accel: 10000
                        max_accel_to_decel: 10000
                        Test aborded")}
                        
## only for reference files are converted in the backround
[gcode_macro _PRINT_INFO2]
gcode:
  {action_respond_info("INPUT SHAPER:
                        ssh in the PI and run:
                        ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png  
                        ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png")}

## Shell Comand is not supported by a default klipper installation 
[gcode_shell_command plot_graph]
command: sh /home/pi/klipper_config/script/plot_graph.sh
timeout: 30.
verbose: True

[gcode_shell_command vnc_start]
command: sh ./home/pi/startvnc start >/dev/null 2>&1
timeout: 30.
verbose: True

[gcode_shell_command vnc_stop]
command: sh ./home/pi/startvnc stop
timeout: 30.
verbose: True

[gcode_shell_command vnc_restart]
command: sh ./home/pi/startvnc restart
timeout: 30.
verbose: True

[gcode_shell_command vnc_status]
command: sh ./home/pi/startvnc status
timeout: 30.
verbose: True

[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/script/autocommit.sh
timeout: 30.
verbose: True


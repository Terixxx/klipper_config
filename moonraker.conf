[server]
host: 0.0.0.0
port: 7125
enable_debug_logging: False
config_path: /home/pi/klipper_config
log_path: /home/pi/klipper_logs
temperature_store_size: 3600
gcode_store_size: 1000
klippy_uds_address: /tmp/klippy_uds

[authorization]
enabled: True
api_key_file: ~/.moonraker_api_key

trusted_clients:
 10.0.0.0/8
 127.0.0.0/8
 169.254.0.0/16
 172.16.0.0/12
 192.168.0.0/16
 192.168.160.0/24
 85.14.29.10
 149.62.202.157
 FE80::/10
 ::1/128

cors_domains:
    *.lan
    *://app.fluidd.xyz
    http://*.local
    http://my.mainsail.xyz
    https://my.mainsail.xyz
    http://app.fluidd.xyz
    https://app.fluidd.xyz
    http://10.20.0.50
    http://10.20.0.50:*


 
[octoprint_compat]

[history]

[update_manager]
enable_auto_refresh: True

[update_manager client fluidd]
type: web
repo: cadriel/fluidd
path: ~/fluidd

# [update_manager client mainsail]
# type: web
# repo: meteyou/mainsail
# path: ~/mainsail

[update_manager client kiauh]
type: git_repo
path: /home/pi/kiauh
origin: https://github.com/th33xitus/kiauh.git

[update_manager client z_calibration]
 type: git_repo
 path: /home/pi/klipper_z_calibration
 origin: https://github.com/protoloft/klipper_z_calibration.git
 install_script: install.sh

[update_manager client moonraker-telegram-bot]
type: git_repo
path: ~/moonraker-telegram-bot
origin: https://github.com/nlef/moonraker-telegram-bot.git
env: ~/moonraker-telegram-bot-env/bin/python
requirements: requirements.txt
install_script: install.sh


[timelapse]
enabled: True
##   If this set to False the Gcode macros are ignored and
##   the autorender is disabled at the end of the print.
##   The idea is to disable the plugin by default and only activate 
##   it during runtime via the http endpoint if a timelapse is desired.
autorender: False
##   If this is set to False, the autorender is disabled at the end of the print.
constant_rate_factor: 15
##   The range of the CRF scale is 0–51, where 0 is lossless,
##   23 is the default, and 51 is worst quality possible. 
##   A lower value generally leads to higher quality, and a 
##   subjectively sane range is 17–28.
##   more info: https://trac.ffmpeg.org/wiki/Encode/H.264
output_framerate: 30
##   Output framerate of the generated video
output_path: ~/timelapse/
##   Path where the generated video will be saved
frame_path: /tmp/timelapse/
##   Path where the temporary frames are saved
time_format_code: %m%d%Y_%H%M
##   Manipulates datetime format of the output filename
##   see: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes
snapshoturl: http://localhost:8080/?action=snapshot
##   url to your webcamstream
pixelformat: yuv420p
##   set pixelformat for output video
##   default to yuv420p because eg. yuvj422p will not play on 
##   on most smartphones or older media players
#extraoutputparams: 
##   here you can extra output parameters to FFMPEG 
##   further info: https://ffmpeg.org/ffmpeg.html 
##   eg rotate video by 180° "-vf transpose=2,transpose=2"
##   or repeat last frame for 5 seconds:
##   -filter_complex "[0]trim=0:5[hold];[0][hold]concat[extended];[extended][0]overlay"

 # [update_manager client KlipperScreen]
# type: git_repo
# path: /home/pi/KlipperScreen
# origin: https://github.com/jordanruthe/KlipperScreen.git
# env: /home/pi/.KlipperScreen-env/bin/python
# requirements: scripts/KlipperScreen-requirements.txt
# install_script: scripts/KlipperScreen-install.sh
